//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.09.18 at 09:09:37 PM CDT 
//


package org.fiveloyds.cookbook.domain;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;


/**
 * <p>Java class for cookingUnit.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="cookingUnit">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="teaspoon"/>
 *     &lt;enumeration value="tablespoon"/>
 *     &lt;enumeration value="cup"/>
 *     &lt;enumeration value="ounce"/>
 *     &lt;enumeration value="pound"/>
 *     &lt;enumeration value="pint"/>
 *     &lt;enumeration value="quart"/>
 *     &lt;enumeration value="pinch"/>
 *     &lt;enumeration value="peices"/>
 *     &lt;enumeration value="parts"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlEnum
public enum CookingUnit {

    @XmlEnumValue("teaspoon")
    TEASPOON("teaspoon"),
    @XmlEnumValue("tablespoon")
    TABLESPOON("tablespoon"),
    @XmlEnumValue("cup")
    CUP("cup"),
    @XmlEnumValue("ounce")
    OUNCE("ounce"),
    @XmlEnumValue("pound")
    POUND("pound"),
    @XmlEnumValue("pint")
    PINT("pint"),
    @XmlEnumValue("quart")
    QUART("quart"),
    @XmlEnumValue("pinch")
    PINCH("pinch"),
    @XmlEnumValue("peices")
    PEICES("peices"),
    @XmlEnumValue("parts")
    PARTS("parts");
    private final String value;

    CookingUnit(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CookingUnit fromValue(String v) {
        for (CookingUnit c: CookingUnit.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
